NAME   : BHARATH KUMAR REDDY VANGOOR
SBU ID : 110168461
NETWORK SECURITY HOME WORK 1
===============================================================================
Q1. How many packets does the trace contain? 
Command : tcpdump -n -r hw1.pcap | wc -l
Answer : 32664 (Total packets)
Explaination : 
	Used tcpdump to parse the trace packet, used follwoing option :
	-n --> To not convert the address to names, to reduce the time.
	-r --> To give filename as argument to parse.
	tcpdump outputs all the packets present in the trace file to the stadout line by line, so I'm counting the number of lines it generated using 'wc -l' option in shell, which prints the number of lines.

2. How many ARP packets and how many UDP packets?
Commands :
	ARP Packets : tcpdump -n -r hw1.pcap arp | wc -l
	UDP Packets : tcpdump -n -r hw1.pcap udp | wc -l
Answers :
	ARP Packets : 11304 (from command above)
	UDP Packets : 18382 (from command above)
Explaination :
	Passed respective types(arp or udp) to tcpdump command as arguments which prints only respective packet types to stdout, used 'wc -l' to count the packets and print them.

3. How many packets were exchanged between 192.168.0.200 and 91.189.92.190?
Commands :
	tcpdump -n -r hw1.pcap "(src host 192.168.0.200 and dst host 91.189.92.190) or (src host 91.189.92.190 and dst host 192.168.0.200)" | wc -l
Answer :
	543
Explaination :
	I'm counting total number of packets that were exchanged in both directions between hosts 192.168.0.200 and 91.189.92.190, 
	tcpdump provides an option called 'src' and 'dst' which prints the packets containg that IP has src or dst, again I used simple filter
	to track where source is 192.168.0.200 and destination is 91.189.92.190 and vice versa.

4. Print the unique source IP addresses found in the trace. 
Commands :
	tcpdump -nt -r hw1.pcap ip | awk '{print $2}' | tr . ' '|awk '{print $1"."$2"."$3"."$4}' | sort -n | uniq
Answer :
	0.0.0.0
	1.234.31.20
	46.51.197.88
	46.51.197.89
	62.252.170.81
	62.252.170.91
	87.230.23.162
	87.98.246.8
	91.189.88.33
	91.189.89.88
	91.189.90.40
	91.189.90.41
	91.189.91.14
	91.189.91.15
	91.189.92.190
	92.240.68.152
	122.154.101.54
	130.75.16.5
	159.148.96.184
	169.254.56.55
	192.168.0.1
	192.168.0.10
	192.168.0.11
	192.168.0.12
	192.168.0.2
	192.168.0.200
	192.168.0.3
	192.168.0.5
	192.168.0.6
	192.168.0.7
	194.168.4.100
	216.137.63.121
	216.137.63.137

Explaination :
	I'm removing the time stamp details from tcpdump output using '-t' option and I'm only printing IP packets by passing 'ip' as argument to tcpdump.
	From the printed packets I'm taking the 2nd column by using 'awk' which contains only source IP addresses, and I remove port numbers from it
	by replacing dot(.) with space(' ') and using 'awk' I combine first 4 columns of the output with dots to get the source IP. Then I sort the IP's and call 'uniq'
	to find the unique IP addresses.

5. Print the unique destination IP addresses found in the trace.
Commands : 
	tcpdump -nt -r hw1.pcap ip | awk '{print $4}' | tr : '.' | tr . ' ' | awk '{print $1"."$2"."$3"."$4}' | sort -n | uniq
Answer :
	1.234.31.20
	46.51.197.88
	46.51.197.89
	62.252.170.81
	62.252.170.91
	87.230.23.162
	87.98.246.8
	91.189.88.33
	91.189.89.88
	91.189.90.40
	91.189.90.41
	91.189.91.14
	91.189.91.15
	91.189.92.190
	92.240.68.152
	122.154.101.54
	130.75.16.5
	159.148.96.184
	169.254.255.255
	192.168.0.12
	192.168.0.200
	192.168.0.255
	194.168.4.100
	216.137.63.121
	216.137.63.137
	224.0.0.22
	224.0.0.251
	224.0.0.252
	224.0.0.253
	239.255.255.250
	255.255.255.255

Explaination :
	I'm removing the time stamp details from tcpdump output using '-t' option and I'm only printing IP packets by passing 'ip' as argument to tcpdump.
	From the printed packets I'm taking the 4th column by using 'awk' which contains only destination IP addresses, and I remove port numbers from it
        by replacing dot(.) with space(' ') and using 'awk' I combine first 4 columns of the output with dots to get the source IP. Then I sort the IP's and call 'uniq'
        to find the unique IP addresses.


6. What are the top-5 TCP and top-5 UDP destination ports?
Commands :
    Top-5 TCP Destination Ports :
	tcpdump -nt -r hw1.pcap tcp | awk '{print $4}' | tr : '.' | tr . ' ' | awk '{print $5}' | sort | uniq -c | sort -nr | head -5 | awk '{print $2}'
    
    Top-5 UDP Destination Ports :
	tcpdump -nt -r hw1.pcap udp | awk '{print $4}' | tr : '.' | tr . ' ' | awk '{print $5}' | sort | uniq -c | sort -nr | head -5 | awk '{print $2}'
 
Answer :
    Top-5 TCP Destination Ports :
	80
	54634
	49836
	47110
	40341

    Top-5 UDP Destination Ports :
	1900
	137
	5355
	5353
	138

Explaination :
	I'm removing the time stamp details from tcpdump output using '-t' option and I'm only printing packets by passing 'tcp' or' udp' as argument to tcpdump.
	From the printed packets I'm taking the 4th column by using 'awk' which contains only destination IP addresses, and I need only port numbers from it
        by replacing dot(.) with space(' ') and using 'awk' I take the 5th column of the output to get the port numbers. I sort them and I count them with 'uniq -c' option,
	Then I sort the count by reverse order to get the most frequent ones at top and I print only top 5 by 'head -5', I print only 2nd columns since 1st column contain count values.

7. How many TCP packets have the SYN flag set?
Commands :
	tcpdump -nt -r hw1.pcap 'tcp[13] & 2 == 2' | wc -l

Answer :
	75

Explaination (Contetnt took from man page of tcpdump):
	TCP header usually holds 20 octets of data, unless options are present.
	Starting to count with 0, the relevant TCP control bits are contained in octet 13:
        0             7|             15|             23|             31
       ----------------|---------------|---------------|----------------
       |  HL   | rsvd  |C|E|U|A|P|R|S|F|        window size            |
       ----------------|---------------|---------------|----------------
       |               |  13th octet   |               |               |
	Recall that we want to capture packets with only SYN set.  Let's see what happens to octet 13 if a TCP datagram arrives with the SYN bit set in its header:

                       |C|E|U|A|P|R|S|F|
                       |---------------|
                       |0 0 0 0 0 0 1 0|
                       |---------------|
                       |7 6 5 4 3 2 1 0|
		
	 Looking at the control bits section we see that only bit number 1 (SYN) is set.

       Assuming that octet number 13 is an 8-bit unsigned integer in network byte order, the binary value of this octet is

              00000010

       and its decimal representation is

          7     6     5     4     3     2     1     0
       0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 0*2 + 1*2 + 0*2  =  2

	Now we want to check which packets have SYNC bit set that is the second bit of octet13 is 1, that is the reason I AND the complete octect 13 with 2 and check whether the result is 2 or not, and I count these number of packets with 'wc -l'.

8. How many TCP connection attempts were made ?
Commands :
	tcpdump -nt -r hw1.pcap 'tcp[13] == 2' | wc -l

Answer :
	37

Explaination :
	In this case we only check those packets which have only SYNC bit set because that is the starting point of connection. So for that I check the 2nd bit of 13th octet to 2 and count those packets.

9. Towards which ports were TCP connection attempts made ?
Commands :
	tcpdump -nt -r hw1.pcap 'tcp[13] == 2' | awk '{print $4}' | tr : '.' | tr . ' ' | awk '{print $5}' | sort | uniq

Answer :
	443
	465
	80
	9100

Explaination :
	From question 8, I filter the packets which have only SYNC Packet set. And then using 'awk' I take the destination host, and remove the IP and consider only Port numbers. Then I sort them and take only unique among them.

10. How many HTTP GET requests were made? Print the URLs of all HTTP requests for JPG files.
Commands :
    HTTP GET requests :
	tcpdump -Ant -r hw1.pcap dst port 80 | grep "GET" | wc -l
    URLs of all HTTP Requests :
	tcpdump -Ant -r hw1.pcap dst port 80 | grep "GET" | grep -i "JPG" | awk '{print $2}'

Answer :
    HTTP GET requests :
	208
    URLs of all HTTP Requests :
	http://pic.leech.it/i/f166c/479246b0asttas.jpg
	/i/f166c/479246b0asttas.jpg
	http://ecx.images-amazon.com/images/I/41oZ1XsiOAL._SL500_AA300_.jpg
	http://www.nature.com/news/2009/090527/images/459492a-i1.0.jpg
	/news/2009/090527/images/459492a-i1.0.jpg

Explaination :
	I use '-A' option of tcpdump which print each packet (minus its link level header) in ASCII.  Handy for capturing web pages.
	HTTP requests are targetted a port 80. So I use 'dest port' option of tcpdump to print only the packets that are addressed to port 80, from those I use 'grep' to find the packets which have 'GET' message and print them. In second part of the question I use 'grep'
	again on the obtained packets for '-i JPG' to get the packets containing 'jpg' files.

11. When (date and time) was the first and last packet of the trace sent ?
Commands :
	tcpdump -ntttt -r hw1.pcap | (head -n1 && tail -n1) | awk '{print "Date : " $1 " Time :" $2}'

Answer :
	Date : 2013-01-12 Time :11:37:42.871346
	Date : 2013-01-14 Time :13:27:03.691498

Explaination :
	I used '-tttt' option for tcpdump which prints the timestamp in default format proceeded by date on each dump line. I captured the first and last packet from the dump using 'head' and 'tail' commands, and then printing the values.

12. What is the brand of the device that sent most of the packets? What is its IP address ?
Commands :
    MAC ADDRESS OD DEVICE THAT SENT MOST PACKETS :
	tcpdump -ent -r hw1.pcap | awk '{print $1}' | sort | uniq -c | sort -nr | awk '{print $2}' | head -n1 
    DEVICE NAME :
	http://www.coffer.com/mac_find/ 
    IP ADDRESS OF ABOVE DEVICE :
	tcpdump -ent -r hw1.pcap | grep "c4:3d:c7:17:6f:9b" | grep -v "ARP" | head -n1 | awk '{print $9}'|tr . ' '|awk '{print $1"."$2"."$3"."$4}'
					 <Mac address from step1>

Answer :
    MAC ADDRESS OD DEVICE THAT SENT MOST PACKETS :
	c4:3d:c7:17:6f:9b
    DEVICE NAME :
	NETGEAR (from http://www.coffer.com/mac_find/)
    IP ADDRESS OF ABOVE DEVICE :
	192.168.0.1

Explaination :
	I used '-e' option to tcpdump to print the link-level header for example, to print MAC layer addresses.
	From the above output I use 'awk' to get MAC Addresses and then sort them, find unique count on them, and sort them in reverse order of their count to get the high count one at top and print the first one using 'head'
	For Device name, I used "mac_find" tool online which takes MAC Address and returns the Vendor name.
	For IP Adress, I grep the lines which have this MAC address and print the IP adress which is in column 9.

13. Report the distribution of Ethernet packet sizes (how many packets of size X exist in the trace, for all values of X in the trace)
Commands :
	tcpdump -ent -r hw1.pcap | grep -i "length" | awk -F "length" '{print $2}' | tr : ' ' | awk '{print $1}' | sort | uniq -c | sort -nr | awk '{print "packet size : "$2" Count : "$1}'
Answer :
packet size : 60 Count : 12190
packet size : 331 Count : 2773
packet size : 395 Count : 2759
packet size : 405 Count : 2758
packet size : 340 Count : 2749
packet size : 92 Count : 1740
packet size : 66 Count : 1046
packet size : 1514 Count : 1034
packet size : 64 Count : 887
packet size : 91 Count : 341
packet size : 342 Count : 326
packet size : 243 Count : 279
packet size : 63 Count : 232
packet size : 110 Count : 180
packet size : 484 Count : 165
packet size : 475 Count : 164
packet size : 539 Count : 162
packet size : 555 Count : 161
packet size : 527 Count : 158
packet size : 541 Count : 155
packet size : 175 Count : 146
packet size : 120 Count : 121
packet size : 386 Count : 88
packet size : 338 Count : 88
packet size : 74 Count : 87
packet size : 392 Count : 87
packet size : 390 Count : 87
packet size : 394 Count : 86
packet size : 362 Count : 86
packet size : 318 Count : 86
packet size : 398 Count : 85
packet size : 326 Count : 85
packet size : 167 Count : 62
packet size : 165 Count : 60
packet size : 249 Count : 56
packet size : 81 Count : 54
packet size : 82 Count : 52
packet size : 84 Count : 43
packet size : 1033 Count : 40
packet size : 219 Count : 39
packet size : 231 Count : 36
packet size : 460 Count : 33
packet size : 602 Count : 32
packet size : 119 Count : 28
packet size : 42 Count : 24
packet size : 315 Count : 24
packet size : 698 Count : 22
packet size : 246 Count : 22
packet size : 551 Count : 17
packet size : 202 Count : 17
packet size : 245 Count : 16
packet size : 302 Count : 15
packet size : 127 Count : 15
packet size : 87 Count : 14
packet size : 90 Count : 13
packet size : 62 Count : 13
packet size : 489 Count : 13
packet size : 666 Count : 12
packet size : 307 Count : 12
packet size : 168 Count : 12
packet size : 142 Count : 11
packet size : 556 Count : 10
packet size : 542 Count : 10
packet size : 540 Count : 10
packet size : 528 Count : 10
packet size : 485 Count : 10
packet size : 476 Count : 10
packet size : 332 Count : 10
packet size : 330 Count : 10
packet size : 154 Count : 10
packet size : 107 Count : 10
packet size : 284 Count : 9
packet size : 248 Count : 9
packet size : 816 Count : 8
packet size : 75 Count : 8
packet size : 68 Count : 8
packet size : 328 Count : 7
packet size : 149 Count : 7
packet size : 125 Count : 7
packet size : 76 Count : 6
packet size : 69 Count : 6
packet size : 610 Count : 6
packet size : 350 Count : 6
packet size : 333 Count : 6
packet size : 282 Count : 6
packet size : 264 Count : 6
packet size : 1034 Count : 6
packet size : 88 Count : 5
packet size : 817 Count : 5
packet size : 628 Count : 5
packet size : 613 Count : 5
packet size : 329 Count : 5
packet size : 89 Count : 4
packet size : 85 Count : 4
packet size : 79 Count : 4
packet size : 65 Count : 4
packet size : 346 Count : 4
packet size : 345 Count : 4
packet size : 322 Count : 4
packet size : 267 Count : 4
packet size : 254 Count : 4
packet size : 244 Count : 4
packet size : 177 Count : 4
packet size : 170 Count : 4
packet size : 124 Count : 4
packet size : 106 Count : 4
packet size : 1035 Count : 4
packet size : 70 Count : 3
packet size : 497 Count : 3
packet size : 344 Count : 3
packet size : 298 Count : 3
packet size : 269 Count : 3
packet size : 247 Count : 3
packet size : 233 Count : 3
packet size : 95 Count : 2
packet size : 94 Count : 2
packet size : 93 Count : 2
packet size : 77 Count : 2
packet size : 704 Count : 2
packet size : 636 Count : 2
packet size : 630 Count : 2
packet size : 624 Count : 2
packet size : 621 Count : 2
packet size : 615 Count : 2
packet size : 614 Count : 2
packet size : 612 Count : 2
packet size : 611 Count : 2
packet size : 607 Count : 2
packet size : 598 Count : 2
packet size : 593 Count : 2
packet size : 590 Count : 2
packet size : 550 Count : 2
packet size : 546 Count : 2
packet size : 502 Count : 2
packet size : 478 Count : 2
packet size : 418 Count : 2
packet size : 383 Count : 2
packet size : 321 Count : 2
packet size : 310 Count : 2
packet size : 309 Count : 2
packet size : 305 Count : 2
packet size : 294 Count : 2
packet size : 288 Count : 2
packet size : 268 Count : 2
packet size : 266 Count : 2
packet size : 265 Count : 2
packet size : 261 Count : 2
packet size : 257 Count : 2
packet size : 255 Count : 2
packet size : 252 Count : 2
packet size : 236 Count : 2
packet size : 229 Count : 2
packet size : 220 Count : 2
packet size : 208 Count : 2
packet size : 184 Count : 2
packet size : 129 Count : 2
packet size : 1212 Count : 2
packet size : 111 Count : 2
packet size : 105 Count : 2
packet size : 979 Count : 1
packet size : 952 Count : 1
packet size : 926 Count : 1
packet size : 760 Count : 1
packet size : 752 Count : 1
packet size : 746 Count : 1
packet size : 730 Count : 1
packet size : 72 Count : 1
packet size : 694 Count : 1
packet size : 690 Count : 1
packet size : 679 Count : 1
packet size : 678 Count : 1
packet size : 640 Count : 1
packet size : 608 Count : 1
packet size : 601 Count : 1
packet size : 596 Count : 1
packet size : 592 Count : 1
packet size : 588 Count : 1
packet size : 568 Count : 1
packet size : 552 Count : 1
packet size : 548 Count : 1
packet size : 544 Count : 1
packet size : 54 Count : 1
packet size : 535 Count : 1
packet size : 518 Count : 1
packet size : 506 Count : 1
packet size : 482 Count : 1
packet size : 479 Count : 1
packet size : 446 Count : 1
packet size : 433 Count : 1
packet size : 432 Count : 1
packet size : 429 Count : 1
packet size : 428 Count : 1
packet size : 417 Count : 1
packet size : 412 Count : 1
packet size : 396 Count : 1
packet size : 389 Count : 1
packet size : 374 Count : 1
packet size : 372 Count : 1
packet size : 347 Count : 1
packet size : 335 Count : 1
packet size : 320 Count : 1
packet size : 317 Count : 1
packet size : 312 Count : 1
packet size : 308 Count : 1
packet size : 306 Count : 1
packet size : 223 Count : 1
packet size : 207 Count : 1
packet size : 195 Count : 1
packet size : 178 Count : 1
packet size : 171 Count : 1
packet size : 156 Count : 1
packet size : 1469 Count : 1
packet size : 144 Count : 1
packet size : 1218 Count : 1
packet size : 1179 Count : 1
packet size : 1170 Count : 1
packet size : 1162 Count : 1
packet size : 1102 Count : 1
	
Explaination :
	I used '-e' option to print the ethernet packet length details, I grep for "length" and take the value after the word using awk. After that I sort, uniq and count, and reverse sort them based on their counts. So that I get the most counted size at the top.
	Finally, prints the packet size and corresponding counts.

